#+title: Configuration
#+author: Levi Crews
#+email: levigcrews@gmail.com

* dotfile manager

[[https://yadm.io/#][yadm]] is Yet Another Dotfiles Manager. ~yadm~ helps you maintain a
single repository of dotfiles while keeping them where they belong
-- in ~$HOME~. No symlinks are required. And using ~yadm~ is easy:
~yadm~ is just a veneer over a bare git repo, so if you know how to
use Git, you know how to use ~yadm~.

Other features of ~yadm~:
1. Bootstrap script for installation
2. OS-specific config files
3. Encryption
4. Custom hooks

One note on ~yadm~ usage: you'll have to refer to files by their full
filepath, which can get rather annoying. If you've modified a bunch of
files from different directories (so you can't use a glob operator)
but you wish to stage them all at once, use the command =yadm add -u=.

* colors

[[https://mayccoll.github.io/Gogh/][Gogh]] provides color schemes for Ubuntu.

* bash prompt

[[https://github.com/starship/starship][Starship]] is the minimal, blazing-fast, and infinitely customizable prompt for any shell.

** Installation
#+BEGIN_SRC
curl -fsSL https://starship.rs/install.sh | bash
#+END_SRC
Add the following to the end of =~/.bashrc=:
#+BEGIN_SRC sh
eval "$(starship init bash)"
#+END_SRC
Store your configuration in =~/.config/starship.toml=

* system keybindings
** key remapping

** hotkeys

[[https://github.com/baskerville/sxhkd][sxhkd]] is a simple X hotkey daemon that works with any desktop
environment running the X window server (including Gnome, the
default on Ubuntu).

The syntax to configure hotkeys is clean and simple. See my list of
hotkeys in =~/.config/sxhkd/sxhkdrc=. Most call various menus through
~rofi~, discussed in the next section.

I followed [[https://stackoverflow.com/a/8290652/11952647][these instructions]] to automatically run sxhkd in the
background upon startup in Ubuntu 20.04. The relevant configuration
file is =~/.config/autostart/sxhkd.desktop=.

* launcher

[[https://github.com/davatorium/rofi][rofi]] is, among other things, a window switcher, application launcher,
and ~dmenu~ replacement. It's comparable to [[https://www.alfredapp.com/][Alfred]] for MacOS or [[https://albertlauncher.github.io/][Albert]]
for Linux.

** configuration

I used [[https://github.com/adi1090x/rofi][adi1090x/rofi]] as my baseline and reconfigured from there. The
reconfiguration involved...
- adding the ~zenburn.rasi~ theme to match my Doom emacs config
- replacing broken glyphs
- selecting styles (menu vs. applet, text vs. colorful)
- setting up sxhkd hotkeys to call scripts (prefix: =super + shift=)
- deleting the ~powermenu~ folder (already includes applets for that)
- adding ~filebrowser~ and ~calc~ modi to launcher menu

I find it frustrating how much of the original code is redundant, so
one day I may try to refactor the codebase.

This configuration requires rofi 1.6.0 or later.

** usage

Any task that interacts with the system or machine itself is within
the scope of ~rofi~. This includes...
- controlling the system (power, network, etc.)
- launching GUI apps with ~drun~
- searching files
- taking screenshots with ~scrot~ (saved by default to ~org/figures~)
- opening quicklinks in my default browser
- performing quick calculations
- running custom scripts that I don't know how to write in Lisp

Ubuntu already has decent keybindings for window management, but that
can also be handled by rofi (and is included in my default launcher
menu).

All other tasks, to the extent possible, are handled directly by
Emacs. I'm on an unending quest to rid myself of the mouse, so
ultimately I hope all tasks would fall either under ~rofi~ or Emacs.

** what is a ~dmenu~ replacement?

What does it mean for ~rofi~ to be a ~dmenu~ replacement? Adam Simpson
gives us a great explanation [[https://adamsimpson.net/writing/getting-started-with-rofi][here]]. ~dmenu~ is a fast and lightweight
dynamic menu for any X server. It reads arbitrary text from ~stdin~
and creates a menu with one item for each line. The user can then
select an item (through the arrow keys or by typing a part of the name)
and the line is printed to ~stdout~. From there, the output can be
piped through an arbitrary sequence of commands and custom scripts.

Here's a simple example: Prompt the user to select 'World' or 'People',
then print the resulting greeting.
#+begin_src shell
echo "Hello $(echo 'World\nPeople' | rofi -dmenu)"
#+end_src

Here's a more advanced example: Change your audio output device.
#+begin_src shell
#!/bin/bash

source="$(pactl list short sinks | cut -f 2 | rofi -dpi 1 -dmenu -p "Change audio:")";
inputs="$(pactl list sink-inputs short | cut -f 1)";

for input in $inputs; do
  pactl move-sink-input "$input" "$source";
done

pactl set-default-sink "$source";
#+end_src

** advanced references

Check out [[https://youtube.com/playlist?list=PLt6-rPpOpkb3XKwdUoLtUhCqkMbyqomba][these videos]] by budlabs -- #16-18 are the best videos I've
seen on ~rofi~.

* Doom emacs
