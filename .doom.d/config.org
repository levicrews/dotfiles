#+TITLE: config
#+DESCRIPTION: My private Doom Emacs configuration
#+STARTUP: overview

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Getting help
You can always read the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/index.org][documentation]] or the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org][FAQ]], but with Emacs' built-in help system, documentation is actually just a keystroke away:
- for functions :: 'C-h f'
- for variables :: 'C-h v'
- for a keybind :: 'C-h k'
- to search available keybinds :: 'C-h b b'
* Compiled lists to work your way through
** [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A community driven list of useful Emacs packages, utilities, libraries, and tutorials
Many of the packages listed in Awesome Emacs are either (i) already included here or (ii) are rendered redundant by this configuration. That said, there's still plenty to be discovered by looking through the list, especially if your needs differ from mine. If you're interested in a pre-built Emacs distribution but you don't like this one, give a careful look to the *Starter Kit* heading of the list.
** [[https://github.com/thinkhuman/writingwithemacs][Writing with Emacs]]: Tips, examples, and resources for writing with Emacs
Most writers are not hackers, too, but many have turned to Emacs nonetheless as their writing tool of choice.
* How to configure Doom Emacs
/Remember/: you do not need to run =doom sync= after modifying this file! It is sufficient to reload Doom with =M-x doom/reload= or 'C-h r r'. In practice, though, I've found that =doom sync= is the only fool-proof way for your changes to take effect.

Here are some additional functions/macros that could help you configure Doom:
- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
  =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'C-c c k' (evil users must press just 'K').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* User info
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC elisp
(setq user-full-name "Levi Crews"
      user-mail-address "levigcrews@gmail.com")
#+END_SRC

* Editor
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ =doom-font=
+ =doom-variable-pitch-font=
+ =doom-big-font= :: used for =doom-big-font-mode=; use this for presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.
You generally only need these two:

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Cascadia Mono PL" :size 13 :weight 'Regular)
      doom-big-font (font-spec :family "Cascadia Mono PL" :size 19 :weight 'SemiBold))
#+END_SRC

** Line numbers
This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.
#+BEGIN_SRC elisp
(setq display-line-numbers-type t)
#+END_SRC

* Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set =doom-theme= or manually load a theme with the
=load-theme= function. This is the default:

#+BEGIN_SRC elisp
(setq doom-theme 'doom-zenburn)
;;(setq doom-theme 'doom-palenight)
#+END_SRC

* Org mode
** Set directories
If you use =org= and don't want your org files in the default location below, change =org-directory=. It must be set before org loads!
#+BEGIN_SRC elisp :tangle no
(after! org
  (setq org-directory "~/Dropbox/org/"))
#+END_SRC

** Formatting
#+begin_src elisp :tangle no
(after! org
  (setq org-hide-leading-stars t)
  (global-visual-line-mode t))
#+end_src

** Global keybindings
#+begin_src elisp
(after! org
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture))
#+end_src

** Disable auto-save and auto-backup
#+begin_src elisp :tangle no
(after! org
  (setq auto-save-default nil
        make-backup-files nil))
#+end_src

** Logging
#+begin_src elisp :tangle no
(after! org
  (setq org-log-done t
        org-log-into-drawer t
        org-clock-into-drawer t))
#+end_src

** Set todo keywords
#+begin_src elisp :tangle no
(after! org
  (setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "KILL(k!)")
    ("INSPECT(i)" "UNDERSTAND(u!)" "EVAL(e!)" "|" "READ(r!)" "KILL(k!)"))))
#+end_src

** Put it all together in one block
#+BEGIN_SRC elisp
(after! org
  (setq org-directory "~/Dropbox/org/"
        org-roam-directory "~/Dropbox/org/roam"
        org-hide-leading-stars t
        org-fontify-done-headline nil
        auto-save-default nil
        make-backup-files nil
        org-log-done t
        org-log-into-drawer nil
        org-clock-into-drawer t
        org-agenda-window-setup 'current-window
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "ONGO(o!)" "WAIT(w@/!)" "|" "DONE(d)" "KILL(k)")
            (sequence "INSPECT(i)" "UNDERSTAND(u!)" "EVAL(e!)" "|" "READ(r)" "KILL(k)"))))
#+END_SRC

** Org-super-agenda
#+begin_src elisp :tangle no
(def-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "Today"
                                   :time-grid t
                                   :scheduled today
                                   :deadline today)))
  :config
  (org-super-agenda-mode))
#+end_src
* LaTeX
** Bibliography
Reftex has a variable that allow you to specify where it should find your bibliography file(s):
#+BEGIN_SRC elisp :tangle no
(after! org
  (setq reftex-default-bibliography "~/Dropbox/crews-econbib/crews_econbib.bib"))
#+END_SRC
** PDF viewer
#+BEGIN_SRC elisp :tangle no
(after! org
  (setq +latex-viewers '(zathura)))
#+END_SRC
