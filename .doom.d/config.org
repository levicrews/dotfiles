#+TITLE: config
#+DESCRIPTION: My private Doom Emacs configuration

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Getting help
You can always read the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/index.org][documentation]] or the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org][FAQ]], but with Emacs' built-in help system, documentation is actually just a keystroke away:
- for functions :: 'C-h f'
- for variables :: 'C-h v'
- for a keybind :: 'C-h k'
- to search available keybinds :: 'C-h b b'
* Compiled lists to work your way through
** [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A community driven list of useful Emacs packages, utilities, libraries, and tutorials
Many of the packages listed in Awesome Emacs are either (i) already included here or (ii) are rendered redundant by this configuration. That said, there's still plenty to be discovered by looking through the list, especially if your needs differ from mine. If you're interested in a pre-built Emacs distribution but you don't like this one, give a careful look to the *Starter Kit* heading of the list.
** [[https://github.com/thinkhuman/writingwithemacs][Writing with Emacs]]: Tips, examples, and resources for writing with Emacs
Most writers are not hackers, too, but many have turned to Emacs nonetheless as their writing tool of choice.
* How to configure Doom Emacs
/Remember/: you do not need to run =doom sync= after modifying this file! It is sufficient to reload Doom with =M-x doom/reload= or =C-h r r=. In practice, though, I've found that =doom sync= is the only fool-proof way for your changes to take effect.

Here are some additional functions/macros that could help you configure Doom:
- =load!= for loading external ~*.el~ files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
  =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol and press =C-c c k= (evil users must press just =K=).
This will open documentation for it, including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.

* User info
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC elisp
(setq user-full-name "Levi Crews"
      user-mail-address "levigcrews@gmail.com")
#+END_SRC

* Don't tangle this config on save
#+begin_src elisp
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src
* Syncing

Following this [[https://www.nicklanasa.com/posts/emacs-syncing-dropbox-beorg][post]] from Nick Lanasa, the following block ensures that your local Emacs and Beorg always stay in sync via Dropbox.
- ~auto-save-mode~ is used to save files in the background when you don't save them explicitly. This propagates changes from local Emacs to Beorg.
- ~auto-revert-mode~ is used to propagate changes from Beorg automagically back to your local Emacs.
#+begin_src elisp
(setq auto-save-visited-mode t
      auto-revert-mode t)
#+end_src

* Editor
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ =doom-font=
+ =doom-variable-pitch-font=
+ =doom-big-font= :: used for =doom-big-font-mode=; use this for presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.
You generally only need these two:

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Cascadia Mono PL" :size 13 :weight 'regular)
      doom-big-font (font-spec :family "Cascadia Mono PL" :size 20 :weight 'bold))
#+END_SRC

** Line numbers
This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.
#+BEGIN_SRC elisp
(setq display-line-numbers-type t)
#+END_SRC

** Linewrapping
#+begin_src elisp
(setq global-visual-line-mode t)
#+end_src
If you want ~auto-fill~ mode on in all major modes, do this:
#+begin_src elisp :tangle no
(setq-default auto-fill-function 'do-auto-fill
              fill-column 80)
#+end_src
** [[https://github.com/abo-abo/hydra][Hydra]]
*** Quick UI adjustments for screen sharing from Sullivan: [[https://eamonnsullivan.co.uk/posts-output/2020-04-25-remote-first-emacs/][Pair programming and Emacs]]
I've been getting the message "Eager macro-expansion failure: (void-variable hydra-ivy/params)".
Seems related to [[https://github.com/abo-abo/hydra/issues/9][this issue]].

#+begin_src elisp
(global-set-key
    (kbd "C-z")
    (defhydra hydra-global-menu (:color red :hint nil)
   "
^Display^        ^Buffers^                    ^Actions^
^^^^^^^^^-----------------------------------------------------
_g_: zoom in     _d_: close all buffers       _u_: update all packages
_s_: zoom out    _o_: open buffer on desktop  _l_: display line numbers

_q_: quit this menu                         _r_: restart emacs
"
   ("g" text-scale-increase)
   ("s" text-scale-decrease)
   ("d" kill-all-buffers)
   ("l" global-display-line-numbers-mode)
   ("r" stop-and-restart-emacs)
   ("u" eds-straight-pull-or-prune)
   ("o" eds/open-buffer-on-desktop)
   ("q" nil)))
#+end_src

** Other
#+begin_src elisp
(setq auto-save-default nil
      make-backup-files nil)
(delete-selection-mode 1)                       ; Replace selection when inserting text
(global-subword-mode 1)                         ; Iterate through CamelCase words
#+end_src

* Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set =doom-theme= or manually load a theme with the
=load-theme= function.

See this [[https://github.com/hlissner/emacs-doom-themes/issues/216][issue]] for instructions on overriding particular colors. See [[https://github.com/hlissner/emacs-doom-themes/blob/89a22c954e4989e3bc0abe4dd9cf8b7e95826140/doom-themes.el][doom-themes.el]] for the definition of =doom-lighten=. The color ~fg-1~ is defined [[https://github.com/hlissner/emacs-doom-themes/pull/447/commits/c44bfee1d9e2e1732ca5b36fbc13e0149f846a6a][here]]. See [[https://github.com/tkf/org-mode/blob/master/lisp/org-faces.el][org-faces.el]] for the list of faces you can set in Org mode.

#+begin_src elisp
(load-theme 'doom-zenburn t)
(custom-theme-set-faces! 'doom-zenburn
  `(org-document-info-keyword :foreground ,(doom-lighten 'fg-1 0.2))
  `(org-done :foreground ,(doom-lighten 'fg-1 0.05))
  `(org-ellipsis :foreground ,(doom-lighten 'fg-1 0.2)))
#+end_src
* Generic text editing
#+begin_src elisp
(global-set-key (kbd "C-c d") 'define-word-at-point)
(global-set-key (kbd "C-c D") 'define-word)
#+end_src
* Org mode
** set directories
If you use =org= and don't want your org files in the default location below, change =org-directory=. It must be set before org loads!
#+BEGIN_SRC elisp
(setq org-dir (concat (getenv "HOME") "/Dropbox/org/")
      crewsbib-dir (concat (getenv "HOME") "/Dropbox/crewsbib/")
      crewsbib (concat crewsbib-dir "crewsbib.bib")
      org-directory org-dir
      deft-directory (concat org-dir "roam/")
      org-roam-directory (concat org-dir "roam/")
      org-roam-dailies-directory (concat org-dir "roam/journal/")
      reftex-default-bibliography (list crewsbib))
#+END_SRC

** global keybindings
#+begin_src elisp
(after! org
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture))
#+end_src

** formatting
#+begin_src elisp
(after! org
  (setq org-ellipsis " ▼" ;; …, ↴, ⬎
        org-hide-leading-stars t
        org-startup-indented t
        org-startup-folded t
        org-hide-emphasis-markers t
        org-fontify-done-headline nil))

(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))

(add-hook 'org-mode-hook (lambda ()
  "Beautify Org Checkbox Symbol"
  (push '("[ ]" . "☐") prettify-symbols-alist)
  (push '("[X]" . "☑" ) prettify-symbols-alist)
  (push '("[-]" . "❍" ) prettify-symbols-alist)
  (prettify-symbols-mode)))

;; This reformats the display of org-ref citations
;; but it makes the buffers too slow
;; (with-eval-after-load 'org
  ;; (add-hook 'org-mode-hook 'org-ref-prettify-mode))
#+end_src

** logging
#+begin_src elisp
(after! org
  (setq org-log-done t
        org-log-into-drawer t
        org-clock-into-drawer t))
#+end_src

The following snippet from [[https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/20][Jethro]] updates the "last_modified"
field of my org-roam notes with the current org inactive timestamp
upon saving.

#+begin_src elisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local time-stamp-active t
                        time-stamp-start "#\\+last_modified:[ \t]*"
                        time-stamp-end "$"
                        time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
            (add-hook 'before-save-hook 'time-stamp nil 'local)))
#+end_src
** set todo keywords
- ideally each would be only four letters (hence KILL for CANCELLED)
- reading TODO sequence implements the three stages of reading from Adler & Van Doren
  + mark state change between stages
  + INSPECT :: read to grasp the structure; read preface, skim body, read conclusion
  + UNDERSTAND :: read to be convinced; try to understand what the author means to say
  + EVAL :: read to tear apart; argue, poke holes, uncover implicit assumptions
#+begin_src elisp
(after! org
  (setq org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "ONGO(o!)" "WAIT(w@/!)" "|" "DONE(d)" "KILL(k)")
    (sequence "INSPECT(i)" "UNDERSTAND(u!)" "EVAL(e!)" "|" "READ(r)" "KILL(k!)"))))
#+end_src

** org-super agenda

The package [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] lets you "supercharge" your Org daily
or weekly agenda. The idea is to group items into sections, rather
than having them all in one big list.

This package filters the results from =org-agenda-finalize-entries=,
which runs just before items are inserted into agenda views. The
filtered groups are then inserted into the agenda buffer, and any
remaining items are inserted at the end. Empty groups are not displayed.

The end result is your standard daily/weekly agenda, but arranged into
groups defined by you. You might put items with certain tags in one
group, habits in another group, items with certain todo keywords in
another, and items with certain priorities in another. The possibilities
are only limited by the grouping functions.

The primary use of this package is for the daily/weekly agenda, made
by the org-agenda-list command, but it also works for other agenda views,
like org-tags-view, org-todo-list, org-search-view, etc. See the official
set of examples [[https://github.com/alphapapa/org-super-agenda/blob/master/examples.org][here]].

/Note again/: =org-super-agenda= does *not* collect items! It only
groups items that are collected by =org-agenda= or [[https://github.com/alphapapa/org-ql][=org-ql=]], which
provides an easier way to write queries to generate agenda-like views.
So if your Agenda command or =org-ql= query does not collect certain
items, they will not be displayed, regardless of what =org-super-agenda=
groups you configure.

The following custom agenda view combines two =org-super-agenda= filters
into a [[https://orgmode.org/manual/Block-agenda.html][block agenda]].

*** TODO what custom views do I want?
**** proposed groups
- the schedule for today (DOs and DUEs + clocked time)
- habits
- SYSTEM (reading, gardening, maintenance, etc.)
- research projects (publication pipeline)
  + NEXT or ONGO
  + any reading headlines (INSPECT, UNDERSTAND, EVAL)
- teaching + service: NEXT or ONGO
- upcoming seminars?
- home: NEXT or ONGO
- all other NEXT or ONGO
**** potential add-ons
- will tags or categories play a role?
  + categories are (by default) just the filename in which the TODO is stored
- effort estimates?
- show clocked tasks in the clock-view?

*** org-super-agenda config
#+begin_src elisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-restore-windows-after-quit t
        org-agenda-start-with-log-mode t ;; show clocked and closed tasks in agenda
        org-agenda-span 'week
        org-agenda-start-on-weekday 1 ;; 0 for Sunday, 1 for Monday
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-breadcrumbs-separator " ❱ "
        org-agenda-block-separator nil
        org-agenda-compact-blocks t)
  (setq org-agenda-custom-commands
        '(("c" "Super view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-agenda-start-day nil)
                        (org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Lagging"
                            :scheduled past
                            :deadline past)
                           (:name "Today"
                            :time-grid t
                            :log t ;; clocked and closed
                            :date today ;; meetings
                            :scheduled today ;; DOs vs DUEs (deadlines)
                            :deadline today)
                           (:name "Upcoming"
                            :scheduled future
                            :deadline future)))))
            (todo "NEXT|ONGO" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Habits"
                             :habit t)
                            (:name "Research pipeline"
                             :file-path "[^a-z0-9]p-[a-z0-9]*\\.org")
                            (:name "Teaching + Service"
                             :file-path ("service-econ\\.org"))
                            (:name "Referee"
                             :file-path ("referee\\.org"))
                            (:name "SysAdmin"
                             :file-path ("foreman\\.org" "system.*\\.org"))
                            (:name "Home"
                             :file-path "home\\.org")))))))))
  :config
  (org-super-agenda-mode))
#+end_src
** org-noter + org-pdftools
The package [[https://github.com/weirdNox/org-noter][org-noter]] has elsewhere been loaded in this Doom config through the ~+ noter~ flag in ~init.el~, but Doom doesn't add any code to configure it by default. The code to configure [[https://github.com/fuxialexander/org-pdftools][org-pdftools]] below is taken directly from its README.

[2021-07-20 Tue 09:22] I'm having [[https://github.com/politza/pdf-tools/issues/600][this issue]] in which my highlights show up in incorrect regions. It appears that ~pdf-tools~ is orphaned, so it was forked [[https://github.com/vedang/pdf-tools][here]]. Unclear if my issue was fixed on the fork. Either way, I should update my pin of ~pdf-tools~.

See cite:Limanowski2017 and cite:Gomez2018 for discussions of ~org-noter~.

#+begin_src elisp
;; This will change the color of the annotation.
(setq pdf-annot-default-markup-annotation-properties
      '((color . "orange")))

(use-package! org-noter
  :config
  (require 'org-noter-pdftools)
  (setq org-noter-hide-other nil))

(use-package! org-pdftools
  :hook (org-mode . org-pdftools-setup-link))

(use-package! org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freestyle-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
    With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

** org-ref

The package [[https://github.com/jkitchin/org-ref][org-ref]] provides modules for citations,
cross-references, and bibliographies. It's developed by John
Kitchin, who also develops [[https://github.com/jkitchin/scimax][scimax]], the Emacs starterkit for
scientists and engineers.

The code below shows how I integrate ~org-ref~ with ~helm-bibtex~
and ~org-roam-bibtex~ to build my bibliographic database. This
[[https://org-roam.discourse.group/t/org-ref-code-in-doom-emacs-init-file/1483][Discourse thread]] was quite helpful.

Note: the ivy-backend for ~org-ref~ is [[https://github.com/jkitchin/org-ref/issues/793][not actually]] ~ivy-bibtex~.
Some of the code below may be redundant, but it works!

[2021-07-20 Tue 09:30]: Org mode now has native support for
citations with ~org-cite~. See the README of [[https://github.com/bdarcus/bibtex-actions][BibTeX Actions]] for an
alternative workflow that uses this native support. According to [[https://github.com/hlissner/doom-emacs/pull/5212][
this pull request]] to Doom Emacs, I expect ~org-cite~ to take over.
(See also [[https://github.com/hlissner/doom-emacs/pull/2888][this one]] and [[https://github.com/jkitchin/org-ref/issues/885][this one]]. See [[https://youtu.be/4ta4J20kpmM][this video]] from John Kitchin.)

[2021-08-05 Thu 06:39]: The new ~org-cite~ feature is described [[https://blog.tecosaur.com/tmio/2021-07-31-citations.html][here]].

#+begin_src elisp
(use-package! org-ref
    :after org
    :defer t
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite)
    (let ((cache-dir (concat doom-cache-dir "org-ref")))
    (unless (file-exists-p cache-dir)
      (make-directory cache-dir t))
    (setq orhc-bibtex-cache-file (concat cache-dir "/orhc-bibtex-cache")))
    :config
    (setq org-ref-default-bibliography (list crewsbib)
          org-ref-default-citation-link "cite"
          org-ref-notes-directory (concat org-roam-directory "refs/")
          org-ref-notes-function 'orb-edit-notes
          org-ref-pdf-directory (concat crewsbib-dir "pdf/")
          org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex))
#+end_src

** helm-bibtex

The package [[https://github.com/tmalsburg/helm-bibtex][helm-bibtex]] provides a clean search interface for your
bibliographic database. You can use either Helm or Ivy as your
front-end completion framework. Consistent with the rest of my config,
I use Ivy.

[2021-06-30 Wed 13:17]: It takes >30sec to parse my bib with ~2000 entries.
See [[https://github.com/tmalsburg/helm-bibtex/issues/159][this issue]] on slow parsing for potential fixes.

[2021-07-20 Tue 09:25]: The package [[https://github.com/bdarcus/bibtex-actions][BibTeX Actions]] provides similar
functionality through [[https://github.com/raxod502/selectrum][selectrum]], [[https://github.com/oantolin/embark/][embark]], and [[https://github.com/minad/marginalia][marginalia]]. Org mode now
has native support for citations with ~org-cite~. The BibTeX Actions
README shows how to set it up.

*** features
- use either Helm or Ivy
- Quick access to your bibliography from within Emacs
- Powerful search capabilities
- Provides instant search results as you type
- Tightly integrated with LaTeX authoring, emails, Org mode, etc.
- Open the PDFs, URLs, or DOIs associated with an entry
- Insert LaTeX cite commands, Ebib links, or Pandoc citations, BibTeX entries, or plain text references at point, attach PDFs to emails
- Support for note taking
- Quick access to online bibliographic databases such as Pubmed, arXiv, Google Scholar, Library of Congress, etc.
- Import BibTeX entries from CrossRef and other sources
*** bibtex-completion config
#+begin_src elisp
(use-package! bibtex-completion
  :defer t
  :config
  (setq bibtex-completion-bibliography crewsbib
        bibtex-completion-library-path (concat crewsbib-dir "pdf/")
        bibtex-completion-pdf-field "file" ;; pulls PDF path from "File" field of JabRef
        bibtex-completion-find-additional-pdfs t ;; will match all <citekey>-appendix.pdf
        bibtex-completion-notes-path (concat org-roam-directory "refs") ;; one note file per reference
        bibtex-completion-additional-search-fields '(keywords journal booktitle)
        bibtex-completion-display-formats
        '((article       . "${=has-pdf=:2}${=has-note=:2} ${=type=:4} ${year:4} ${author:36} ${title:*} ${journal:20}")
          (book          . "${=has-pdf=:2}${=has-note=:2} ${=type=:4} ${year:4} ${author:36} ${title:*}")
          (inbook        . "${=has-pdf=:2}${=has-note=:2} ${=type=:4} ${year:4} ${author:36} ${title:*} Chapter ${chapter:30}")
          (incollection  . "${=has-pdf=:2}${=has-note=:2} ${=type=:4} ${year:4} ${author:36} ${title:*} ${booktitle:30}")
          (inproceedings . "${=has-pdf=:2}${=has-note=:2} ${=type=:4} ${year:4} ${author:36} ${title:*} ${booktitle:30}")
          (t             . "${=has-pdf=:2}${=has-note=:2} ${=type=:4} ${year:4} ${author:36} ${title:*}"))
        bibtex-completion-pdf-symbol ""
        bibtex-completion-notes-symbol ""
        bibtex-completion-format-citation-functions
            '((org-mode      . bibtex-completion-format-citation-org-title-link-to-PDF)
              (latex-mode    . bibtex-completion-format-citation-cite)
              (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
              (default       . bibtex-completion-format-citation-default))
        ))
#+end_src

*** ivy-bibtex config
#+begin_src elisp
(use-package! ivy-bibtex
  :when (featurep! :completion ivy)
  :config
  (global-set-key (kbd "C-c n b") 'ivy-bibtex)
  (add-to-list 'ivy-re-builders-alist '(ivy-bibtex . ivy--regex-plus))
  (setq ivy-bibtex-default-action 'ivy-bibtex-edit-notes)
  ;;(ivy-set-display-transformer 'org-ref-ivy-insert-cite-link 'ivy-bibtex-display-transformer)

  (defun lgc/bibtex-random-ref (&optional arg local-bib)
  "Find a random BibTeX entry using ivy.
   With a prefix ARG the cache is invalidated and the bibliography
   reread. If LOCAL-BIB is non-nil, display that the BibTeX entries are read
   from the local bibliography.  This is set internally by `ivy-bibtex-with-local-bibliography'."
   (interactive "P")
   (when arg
     (bibtex-completion-clear-cache))
   (bibtex-completion-init)
   (let* ((candidates (bibtex-completion-candidates))
          (key (bibtex-completion-key-at-point))
          (preselect (and key
                         (cl-position-if (lambda (cand)
                                           (member (cons "=key=" key)
                                                   (cdr cand)))
                                         candidates)))) ;; ~candidates~ is a list

      (ivy-read (format "random BibTeX entry: " (if local-bib " (local)" ""))
                (list (nth (random (length candidates)) candidates)
                      (nth (random (length candidates)) candidates)
                      (nth (random (length candidates)) candidates))
                :preselect preselect
                :caller 'lgc/bibtex-random-ref
                ;;:history 'ivy-bibtex-history
                :action ivy-bibtex-default-action)))

  (global-set-key (kbd "C-c n p") 'lgc/bibtex-random-ref))
#+end_src

** deft

[[https://github.com/jrblevin/deft][Deft]] is an Emacs mode for quickly browsing, filtering, and editing
directories of plain text notes, inspired by Notational Velocity.

I use ~deft~ to search through my ~org-roam~ files. Most of the code
below is redundant because I never use ~deft~ to create notes (that's
handled by ~org-roam~). The only important setting is turning on
~deft-recursive~ to search subdirectories.

Reminder: Use =C-c C-q= to quit ~deft~.

#+begin_src elisp
(use-package! deft
  :after org
  :init
  (setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase)))
  :custom
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  (deft-extensions '("tex" "org"))
  (deft-default-extension "org"))
#+end_src

** org-roam

[[https://github.com/org-roam/org-roam][Org-roam]] is a plain-text knowledge management system.
See the manual [[https://www.orgroam.com/manual.html][here]].

~org-roam~ has a sister package called [[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] for managing
reference notes. ~org-roam-bibtex~ plays well with ~org-ref~,
~helm-bibtex~, ~org-noter~, and ~org-pdftools~.

As of [2021-06-25 Fri], none of these custom keybindings work.
I use whatever keybindings come out of the box instead.

*** org-roam config
#+begin_src elisp
(after! org
  (map! ("C-c n d" #'org-roam-today)
         :map org-mode-map
         (("C-c n l" #'org-roam) ;; call this to show backlinks in side-buffer
          ("C-c n u" #'org-roam-update-buffer)
          ("C-c n i" #'org-roam-insert)
          ("C-c n c" #'org-roam-capture)
          ("C-c n g" #'org-roam-graph)
          ("C-c n r" #'org-roam-random-note)))
  (setq org-roam-tag-sources '(prop last-directory)
        org-roam-capture-templates
        '(("p" "plain" plain #'org-roam-capture--get-point "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n#+roam_alias: \n#+roam_tags: \n#+created: %U\n#+last_modified: %U\n\n"
         :unnarrowed t)
          ("d" "data" plain #'org-roam-capture--get-point "%?"
         :file-name "refs/${slug}"
         :head "#+title: ${title}\n#+roam_alias: \n#+roam_tags: data refs\n#+created: %U\n#+last_modified: %U\n\n* Overview\n:PROPERTIES:\n:url: \n:END:\n* Specifications\n* Construction\n* Access\n"
         :unnarrowed t)
          ("r" "resource" plain #'org-roam-capture--get-point "%?"
         :file-name "refs/${slug}"
         :head "#+title: ${title}\n#+roam_alias: \n#+roam_tags: refs\n#+created: %U\n#+last_modified: %U\n\n* Overview\n:PROPERTIES:\n:url: \n:END:\n"
         :unnarrowed t))
        org-roam-dailies-capture-templates
        '(("d" "default" plain
           #'org-roam-capture--get-point
           "* %?"
           :file-name "journal/%<%Y-%m-%d>"
           :head "#+title: %<%d-%B-%Y>\n\n")
          ("t" "today" plain
           #'org-roam-capture--get-point
           "* %?"
           :file-name "journal/%<%Y-%m-%d>"
           :head "#+title: %<%d-%B-%Y>\n\n"
           %["~/Dropbox/org/templates/daily.template"])
          ("w" "weekly review" plain
           #'org-roam-capture--get-point
           "* %?"
           :file-name "journal/%<%Y-%m-%d>"
           :head "#+title: %<%d-%B-%Y>\n\n"
           %["~/Dropbox/org/templates/review-week.template"]))))
#+end_src

*** org-roam-bibtex config

#+begin_src elisp
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-roam-bibtex-mode-map
         (("C-c n f" . orb-find-non-ref-file))
         :map org-mode-map
         (("C-c n t" . orb-insert-non-ref)
          ("C-c n a" . orb-note-actions)))
  :config
  (require 'org-ref)
  (require 'bibtex-completion)
  (require 'ivy-bibtex))

(setq orb-autokey-format "%A[5]%y"
      orb-preformat-keywords
      '("citekey" "title" "url" "doi" "year" "journal" "author-or-editor" "keywords" "file")
      orb-process-file-keyword t
      orb-file-field-extensions '("pdf")
      orb-insert-interface 'ivy-bibtex
      orb-note-actions-interface 'ivy
      orb-insert-link-description 'citation)
(defvar orb-title-format "${author-or-editor} (${year}). ${title}."
  "Format of the title to use for `orb-templates'.")
(setq orb-templates
      `(("r" "ref" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: cite:${citekey}"
                      "#+roam_tags: ${keywords}"
                      "#+created: %U"
                      "#+last_modified: %U\n")))
     ("p" "ref + physical" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: cite:${citekey}"
                      "#+roam_tags: ${keywords}"
                      "#+created: %U"
                      "#+last_modified: %U\n"
                      "* Summary :physical:"
                      "* Coming to terms")))
     ("n" "ref + noter" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: cite:${citekey}"
                      "#+roam_tags: ${keywords}"
                      "#+created: %U"
                      "#+last_modified: %U\n"
                      "* Annotations :noter:"
                      ":PROPERTIES:"
                      ":noter_document: ${file}"
                      ":noter_page:"
                      ":author: ${author-or-editor}"
                      ":journal: ${journal}"
                      ":year: ${year}"
                      ":doi: ${doi}"
                      ":END:"
                      "* RAP+M"
                      "** Position"
                      "** Research question"
                      "** Method"
                      "*** data"
                      "*** model"
                      "** Answer"
                      "* Picking nits"
                      )))
     ("u" "ref + url" plain
      (function org-roam-capture--get-point)
      ""
      :file-name "refs/${citekey}"
      :head ,(s-join "\n"
                     (list
                      (concat "#+title: "
                              orb-title-format)
                      "#+roam_key: cite:${citekey}"
                      "#+roam_tags: ${keywords}"
                      "#+created: %U"
                      "#+last_modified: %U\n"
                      "* Summary"
                      ":PROPERTIES:"
                      ":author: ${author-or-editor}"
                      ":year: ${year}"
                      ":url: ${url}"
                      ":END:")))))
#+end_src

* LaTeX
** PDF viewer
#+begin_src elisp :tangle no
(after! org
  (setq +latex-viewers '(zathura)))
#+end_src
** Recipe
From the ~org-ref~ documentation: "If you plan to build PDF files via LaTeX you need to make sure that org-latex-pdf-process is set to process the bibliography (using bibtex or biblatex). Here is one example of how to do that"

#+begin_src elisp
(after! org
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src

* insert-esv

The package [[https://github.com/sam030820/insert-esv][insert-esv]] allows you to insert verses from the ESV via the Crossway API.

#+begin_src elisp
(use-package! insert-esv
  :init
  (setq insert-esv-crossway-api-key "24c9430529b290c392e875b1563aac55e4210a7d")
  (setq insert-esv-include-short-copyright 'true)
  (setq insert-esv-include-headings 'false)
  (setq insert-esv-include-first-verse-numbers 'false)
  (setq insert-esv-include-footnotes 'false)
  (setq insert-esv-include-passage-horizontal-lines 'false)
  (setq insert-esv-line-length '65)
  (global-set-key (kbd "C-x i") 'insert-esv-passage))
#+end_src
