#+TITLE: config
#+DESCRIPTION: My private Doom Emacs configuration

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Getting help
You can always read the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/index.org][documentation]] or the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org][FAQ]], but with Emacs' built-in help system, documentation is actually just a keystroke away:
- for functions :: 'C-h f'
- for variables :: 'C-h v'
- for a keybind :: 'C-h k'
- to search available keybinds :: 'C-h b b'
* Compiled lists to work your way through
** [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A community driven list of useful Emacs packages, utilities, libraries, and tutorials
Many of the packages listed in Awesome Emacs are either (i) already included here or (ii) are rendered redundant by this configuration. That said, there's still plenty to be discovered by looking through the list, especially if your needs differ from mine. If you're interested in a pre-built Emacs distribution but you don't like this one, give a careful look to the *Starter Kit* heading of the list.
** [[https://github.com/thinkhuman/writingwithemacs][Writing with Emacs]]: Tips, examples, and resources for writing with Emacs
Most writers are not hackers, too, but many have turned to Emacs nonetheless as their writing tool of choice.
* How to configure Doom Emacs
/Remember/: you do not need to run =doom sync= after modifying this file! It is sufficient to reload Doom with =M-x doom/reload= or 'C-h r r'. In practice, though, I've found that =doom sync= is the only fool-proof way for your changes to take effect.

Here are some additional functions/macros that could help you configure Doom:
- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
  =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'C-c c k' (evil users must press just 'K').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* User info
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC elisp
(setq user-full-name "Levi Crews"
      user-mail-address "levigcrews@gmail.com")
#+END_SRC

* Editor
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ =doom-font=
+ =doom-variable-pitch-font=
+ =doom-big-font= :: used for =doom-big-font-mode=; use this for presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.
You generally only need these two:

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Cascadia Mono PL" :size 13 :weight 'Regular)
      doom-big-font (font-spec :family "Cascadia Mono PL" :size 19 :weight 'SemiBold))
#+END_SRC

** Line numbers
This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.
#+BEGIN_SRC elisp
(setq display-line-numbers-type t)
#+END_SRC

* Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set =doom-theme= or manually load a theme with the
=load-theme= function. This is the default:

#+BEGIN_SRC elisp
(setq doom-theme 'doom-zenburn)
(after! org
  (set-face-foreground 'org-hide (doom-color 'bg))
  (set-face-foreground 'org-document-info-keyword (doom-lighten 'fg-1 0.2))
  (set-face-foreground 'org-done (doom-lighten 'fg-1 0.05))
  (set-face-foreground 'org-ellipsis (doom-lighten 'fg-1 0.2)))
;;(setq doom-theme 'doom-palenight)
#+END_SRC

See this [[https://github.com/hlissner/emacs-doom-themes/issues/216][issue]] for instructions on overriding particular colors. See [[https://github.com/hlissner/emacs-doom-themes/blob/89a22c954e4989e3bc0abe4dd9cf8b7e95826140/doom-themes.el][doom-themes.el]] for the definition of =doom-lighten=. The color ~fg-1~ is defined [[https://github.com/hlissner/emacs-doom-themes/pull/447/commits/c44bfee1d9e2e1732ca5b36fbc13e0149f846a6a][here]]. See [[https://github.com/tkf/org-mode/blob/master/lisp/org-faces.el][org-faces.el]] for the list of faces you can set in Org mode.

* Org mode
** Set directories
If you use =org= and don't want your org files in the default location below, change =org-directory=. It must be set before org loads!
#+BEGIN_SRC elisp :tangle no
(after! org
  (setq org-directory "~/Dropbox/org/"))
#+END_SRC

** Formatting
#+begin_src elisp :tangle no
(after! org
  (setq org-ellipsis "…" ;; ▼, ↴, ⬎
        org-hide-leading-stars t
        org-startup-indented t
        org-startup-folded t)
  (global-visual-line-mode t))
#+end_src

** Global keybindings
#+begin_src elisp
(after! org
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture))
#+end_src

** Disable auto-save and auto-backup
#+begin_src elisp :tangle no
(after! org
  (setq auto-save-default nil
        make-backup-files nil))
#+end_src

** Logging
#+begin_src elisp :tangle no
(after! org
  (setq org-log-done t
        org-log-into-drawer t
        org-clock-into-drawer t))
#+end_src

** Set todo keywords
- ideally each would be only four letters (hence KILL for CANCELLED)
- reading TODO sequence implements the three stages of reading from Adler & Van Doren
#+begin_src elisp :tangle no
(after! org
  (setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "KILL(k!)")
    ("INSPECT(i)" "UNDERSTAND(u!)" "EVAL(e!)" "|" "READ(r!)" "KILL(k!)"))))
#+end_src

** Put it all together in one block
#+BEGIN_SRC elisp
(after! org
  (setq org-directory "~/Dropbox/org/"
        org-roam-directory "~/Dropbox/org/roam"
        org-ellipsis " ▼" ;; …, ↴, ⬎
        org-hide-leading-stars t
        org-startup-indented t
        org-startup-folded t
        org-fontify-done-headline nil
        auto-save-default nil
        make-backup-files nil
        org-log-done t
        org-log-into-drawer t
        org-clock-into-drawer t
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "ONGO(o!)" "WAIT(w@/!)" "|" "DONE(d)" "KILL(k)")
            (sequence "INSPECT(i)" "UNDERSTAND(u!)" "EVAL(e!)" "|" "READ(r)" "KILL(k)"))))
#+END_SRC

** [[https://github.com/alphapapa/org-super-agenda][Org-super-agenda]]
This package lets you "supercharge" your Org daily/weekly agenda. The idea is to group items into sections, rather than having them all in one big list.

This package filters the results from =org-agenda-finalize-entries=, which runs just before items are inserted into agenda views. The filtered groups are then inserted into the agenda buffer, and any remaining items are inserted at the end. Empty groups are not displayed.

The end result is your standard daily/weekly agenda, but arranged into groups defined by you. You might put items with certain tags in one group, habits in another group, items with certain todo keywords in another, and items with certain priorities in another. The possibilities are only limited by the grouping functions.

The primary use of this package is for the daily/weekly agenda, made by the org-agenda-list command, but it also works for other agenda views, like org-tags-view, org-todo-list, org-search-view, etc. See the official set of examples [[https://github.com/alphapapa/org-super-agenda/blob/master/examples.org][here]].

/Note again/: =org-super-agenda= does *not* collect items! It only groups items that are collected by =org-agenda= or [[https://github.com/alphapapa/org-ql][=org-ql=]], which provides an easier way to write queries to generate agenda-like views. So if your Agenda command or =org-ql= query does not collect certain items, they will not be displayed, regardless of what =org-super-agenda= groups you configure.

The following custom agenda view combines two =org-super-agenda= filters in a [[https://orgmode.org/manual/Block-agenda.html][block agenda]].

*** TODO [[https://orgmode.org/manual/Tracking-your-habits.html#Tracking-your-habits][habits]]
- daily initiation
- nightly shut down
- chastity
- weekly review
- quarterly review
- annual review
*** TODO what custom views do I want?
**** proposed groups
- the schedule for today (DOs and DUEs + clocked time)
- habits
- SYSTEM (reading, gardening, maintenance, etc.)
- research projects (publication pipeline)
  + NEXT or ONGO
  + any reading headlines (INSPECT, UNDERSTAND, EVAL)
- teaching + service: NEXT or ONGO
- upcoming seminars?
- home: NEXT or ONGO
- all other NEXT or ONGO
**** potential add-ons
- will tags or categories play a role?
  + categories are (by default) just the filename in which the TODO is stored
- effort estimates?
- show clocked tasks in the clock-view?
*** code
#+begin_src elisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-restore-windows-after-quit t
        org-agenda-start-with-log-mode t ;; show clocked and closed tasks in agenda
        org-agenda-span 'week
        org-agenda-start-on-weekday 1 ;; 0 for Sunday, 1 for Monday
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-breadcrumbs-separator " ❱ "
        org-agenda-block-separator nil
        org-agenda-compact-blocks t)
  (setq org-agenda-custom-commands
        '(("c" "Super view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-agenda-start-day nil)
                        (org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Lagging"
                            :scheduled past
                            :deadline past)
                           (:name "Today"
                            :time-grid t
                            :log t ;; clocked and closed
                            :date today ;; meetings
                            :scheduled today ;; DOs vs DUEs (deadlines)
                            :deadline today)
                           (:name "Upcoming"
                            :scheduled future
                            :deadline future)))))
            (todo "NEXT|ONGO" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Habits"
                             :habit t)
                            (:name "Research pipeline"
                             :file-path "[^a-z0-9]p-[a-z0-9]*\\.org")
                            (:name "Teaching + Service"
                             :file-path ("econ27000-intl\\.org" "bus33503-mfge\\.org" "service-econ\\.org"))
                            (:name "SysAdmin"
                             :file-path ("foreman\\.org" "system.*\\.org"))
                            (:name "Home"
                             :file-path "home\\.org")))))))))
  :config
  (org-super-agenda-mode))
#+end_src
* LaTeX
** Bibliography
Reftex has a variable that allow you to specify where it should find your bibliography file(s):
#+BEGIN_SRC elisp :tangle no
(after! org
  (setq reftex-default-bibliography "~/Dropbox/crews-econbib/crews_econbib.bib"))
#+END_SRC
** PDF viewer
#+BEGIN_SRC elisp :tangle no
(after! org
  (setq +latex-viewers '(zathura)))
#+END_SRC
